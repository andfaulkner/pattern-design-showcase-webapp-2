**************************************************************************************
**************************************** DONE ****************************************
**************************************************************************************
! express running - static
! eslint running
! basic webpack build & gulp with targeted watch
! ECMA6 classes - basics
! fast Webpack builds (by splitting out the globals)
! look into Bootstrap-React
! install Bootstrap-React
! add Bootstrap-React css & fonts
		XXX NO BOOTSTRAP-REACT, IT SUCKS
! pull gulpfile config out
! getOptions.js helper to compute and grab all options (to remove logic from config files)
! react classes  <<< not that useful
! react-router (too much crap in index.jsx)
! decorators
! react property validation (PropTypes.*.{isRequired?})

! redux debug tools - get it working!
! mini client-side log
! react-redux mvc todo
! sane, DRY (basic) topbar routing
! get google auth wired in
! get redis session wired in
! pretty logs
! actually get real authentication to occur
! some sort of comparison against data in Redis
! select auth items from google returns
! build carousel

! get carousel to resize on some page resizes
! get carousel to restart when page restarts
! transform-decorators-legacy linter
! multi-output gulpfile
! top logo
! sane library import


################## DONE: March 15th ##################
! Install React-Bootstrap
! get React-Bootstrap to show 1 element (as POC)
! React-Bootstrap TextContent grid
! TextContentBlocks: TextContentBlocks CorporateDesignsBlock static
! TextContentBlocks: BannersImgBlock static
! accelerate Webpack - cut build time by 1/2 (below 5s)
! set SASS up (don't be using inline, it's mostly a bad idea)
! config module setup
! logging setup (winston)

################## DONE: March 16th ##################
! css normalize
! split your Content Blocks items into specific files
! LatestUpdatesBlock static
! SocialMediaButtons static
! FOOTER: get to stick properly (:after syntax?)
! try react standard css. <<< it fucking sucks
! 1/2 Radium [it's OK]
! wire in redux
! L & R arrows to shift between imgs
! dry up gulpfile, webpack, *.html
! webpack splitting
! split auth page
! auth page - basic form
! organize to-do into types, complete it

################## DONE: March 22nd-23rd ##################
! REDUX:: make initial data request to redux from a react component (POC)
! REDUX: set all state changes to occur in redux
! REDUX: outline all state redux will store
! REDUX:: learn Provider tag pattern
! REDUX: outline all app state changes required (diagram)
! REDUX: write actions
! REDUX: write reducers
! REDUX:: Get store, provide to all of app - make data store available to whole app
! REDUX:: wire redux store into react components
! REDUX:: learn react-redux
! HOME:: CAROUSEL: wire modal gallery to carousel images (via Redux)
! COMMON: NAV-MENU:: on route change alter selected menu item -- get highlighting working properly
! COMMON: NAV-MENU:: Actual titles
! COMMON: NAV-MENU:: make titles configurable
! COMMON: NAV-MENU:: Link in new actual page files
! COMMON::: FOOTER: properly laid-out
! COMMON::: FOOTER:  add content
XX COMMON: NAV-MENU:: load navmenu item names in by AJAX?
XX COMMON: NAV-MENU:: required dropdowns?
! BUILD ENVIRONMENT:: require paths relative to server root?
! REACT:: learn react decorators
! REACT:: install and learn react routes
**************************************************************************************
! insecure world writable error
X!X activate postgres in app
! launch mongo
! figure out a "forever" type app for Heroku (pm2)
! implement "forever" type app for Heroku (pm2)
! exclude mongo dir
! try to take mongo out of main dir
! store entire app data in mongo
! Procfile - work out if the log is needed [ANS: IT IS] - web: NODE_PATH=$NODE_PATH:./; node --harmony_default_parameters --harmony_destructuring --es_staging ./node_modules/pm2/bin/pm2 start app.js && pm2 logs all
! accelerate Webpack even more - cut build time by 1/3 (below 4s)
! kill postgres
! P4L
	! bubble bath :)
! get machine to stop fucking crashing
! get a static version to deploy
! fix site path - ban bad requests (for non-existent paths)

**************************************************************************************
ASIDE: Clojure
! install leningen
! get basic repl working in sublime
! a few basic Clojure commands refresher; get back to end of self-created guide
**************************************************************************************
Mar 24
=======

! Data store
! Heroku: initial setup
	! Heroku: install toolkit
	! Heroku: first login
	! Heroku: sample app
	! Heroku: first deploy of webapp
! swap in mongoDB
! mongoDB basics
! determine what types of data to put in the db
! script to bootstrap the original set in
! Set up method of requesting mongoDB for needed data
! request first bit of mongoDB data successfully
X Set up BookshelfJS to act as abstraction over your db (models etc.)
X employ Redis cache
! set up AJAX calls to get data in DB from frontend (once present)
! set up 'initial' AJAX calls on first load
! corporate designs dynamic content - AJAX
! recently updated dynamic content - AJAX


**************************************************************************************
March 26th-30th
===============

! PAGE: HOME:: fix "see more" links
! PAGE: HOME:: gallery cursor
! PAGE: HOME:: see more cursor
! PAGE: HOME:: see more hovers
! DATABASE:: mongodb bootstrapping without unique
! DATABASE:: at least 1 AJAX request
! DATABASE:: get all data from AJAX
! PAGE: HOME:: See more links
! DATABASE:: interface with mongo
! send money to Lisa
! DATABASE:: store a bit of data in mongo
! DATABASE:: retrieve data from mongo
XX DATABASE:: activate redis in app
! DEPLOYMENT:: sample deployment on Heroku
! >:( handle devDependencies needing to be mixed in with regular deps for Heroku
! get initial data into MongoDB in Heroku-friendly way
! one more web component?
! PAGE: 'See more' latest updates
! PAGE: CONTACT:: CONSIDER CONCAT WITH ABOUT
! PAGE: CONTACT:: contact title
! DEPLOYMENT:: determine deployment method <<< WIP todo
X DEPLOYMENT:: learn Docker
! DEPLOYMENT:: deploy to Heroku
! PAGE: GALLERY:: create dynamic 'grid' for page
! PAGE: ABOUT:: about title
! PAGE: ABOUT:: UI component for display of RS image section
! PAGE: ABOUT:: write random left side content
! PAGE: ABOUT:: get left-side content (paragraph) displaying properly
X contact title
! PAGE: UPDATES:: create React list component
! PAGE: UPDATES:: dynamic collection of list-items 
! PAGE: UPDATES:: create React list-item component
! PAGE: UPDATES:: title
! PAGE: UPDATES:: date
! PAGE: UPDATES:: image
! PAGE: UPDATES:: description
! PAGE: UPDATES:: POSSIBLY read more
! PAGE: UPDATES:: social media buttons (to share the item)
XX PAGE: HIRE TAMARA:: decide whether or not you want one (discuss w/ Tamara) [[WE DON'T]]
	 if you do, wireframe it (steal an example from somewhere)
! DECORATORS:: enable decorators
! DECORATORS:: learn decorators
! DECORATORS:: get a class decorator working
! DECORATORS:: decorators basic example
! DECORATORS:: apply to make redux loading nicer
**************************************************************************************
March 31st
==========
- make Mongo overwrite when bootstrapping!
- put PropTypes on your components
- email component
- favicon
- sticky footer
- mongodb bootstrapping working on Heroku
- fix logger to show objects properly. Rests, spreads handy here.
- deal with 'secret' issue
		- read heroku docs for this
- make only 2 most recent corporate designs or updates on home page

**************************************************************************************

**************************************************************************************
**************************************** TODO ****************************************
**************************************************************************************

Routing

AJAX
- learn 'containers' to separate data concerns from UI concerns among React components
- split your components into containers and presenters
	- corporate designs dynamic content - AJAX only show 1st 2
	- recently updated dynamic content - AJAX only show 1st 3


HOME::: Carousel 
-	Translucent vertical blocks on L & R, around arrows
- proper arrows (nicer images)
- fix occasional freezing on resize
		- image click popup
		- stop carousel on popup

Social Media
- determine social media links' behaviour
- links from social media component buttons
- links from footer social media component buttons
- 'share' functionality

Deployment
- wire Heroku site to Tamara's FlowReach domain

PAGE: Gallery
- Wireframe gallery page
- make thumbnails from images to display 
- set dynamic grid to produce modal popup
- wire dynamic grid to gallery images
- paginate if >50 img?

PAGE: About
- PAGE: ABOUT:: subscribe for updates box
- PAGE: ABOUT:: Tamara image in RS image section
- PAGE: ABOUT:: determine what to put in the 'quote box' as seen in the wireframe
- PAGE: ABOUT:: Contact us box.

PAGE: Shop <<< TODO: this todo section is WIP
- wireframe it
- figure out WTF to put in there (consult with Tamara)

PAGE: Contact <<<< WIP: possibly concat with about
- decide what to put in top-right block w/ map (either a pattern or a vague map aimed at Ottawa)
- PAGE: ABOUT:: phone number

PAGE: 'See more' corporate designs
- image on RS, text on LS, alternating
- get Tamara to do a few low-hanging fruit items to fill the section

Subscription
- set up subscription service
- collect emails in db
- allow server to email
- in admin page: ability to send email messages

PAGE:: Admin
- login form (frontend)
- login functionality (backend)
- simple place to route to on auth
- make submit new recent updates box
- make submit new 'corporate designs' box
- login box, backend
- hook rest API up to login box

Build environment
- require paths relative to client root?
- accelerate Babel again

Testing
- set up a test suite (mocha?)
- set up autorunning tests
- write your excellent tests
- learn how to test React components
- test your main react components

React learning
- understand controlled components (vs. not)
- REDUX: understand "containers" for elements (Redux / Flux)
- Redux - finish course 
- react forms
**************************************************************************************


**************************************************************************************
************************************** UNSORTED **************************************
**************************************************************************************
- restructure tag file locations
- Complete React component structure list

Redux
	- write actions
	- write reducers

XXXX material design
	XXX install
	XXX implement one feature

?X react grids

!X react css
	- react decorator-based non-inline styles
	- webpack css ?
- wire in a cool component (POC)

- react-router-redux - replace react-router with it
- DRY your paths again (e.g. to the html entries)

- split auth page out

- auth with redis etc.
		- style auth page
		- post-login page - basic image
		- redis config
		- passport?

Advanced (later)
- browser livereload


________________________________________________________
! base route
X get koa serving a static asset
X login package - with Koa
X admin page - with login
- frontend templating? (react starter?)
- folder structure
- state management (redux)
- build each web-component (React)
- form handling (body parser)
X react starter
X koa starter

routing
X Koa routing
X get route module to work
X work out routes
X create route for each ?

db
! work out table schema
! postgres setup (including scripts)
X ORM setup - bookshelf
X initialize bookshelf
X koa bookshelf?

testing
! install unit testing modules (mocha, request)
- build unit tests?


build
- webpack setup
- build tool setup (Broccoli)
- base brocfile ?
- base gulpfile
- base webpack file